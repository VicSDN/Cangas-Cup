---
import { supabase } from '../../../lib/supabase';

type Goal = {
  player_id: number;
  team_id: number;
};

type Player = {
  id: number;
  name: string;
  team_id: number;
};

type Team = {
  id: number;
  name: string;
};

// Obtener todos los goles del año
const { data: goals, error: goalsError } = await supabase
  .from('tournament_goal')
  .select('player_id, team_id')
  .eq('year', 2025);

if (goalsError) throw goalsError;

// Agrupar goles por jugador
const goalCounts = goals?.reduce<Record<number, number>>((acc, goal) => {
  acc[goal.player_id] = (acc[goal.player_id] || 0) + 1;
  return acc;
}, {}) ?? {};

// Obtener IDs únicos de jugadores y equipos
const playerIds = [...new Set(goals?.map(g => g.player_id))];
const teamIds = [...new Set(goals?.map(g => g.team_id))];

// Obtener jugadores
const { data: players, error: playerError } = await supabase
  .from('tournament_player')
  .select('id, name, team_id')
  .in('id', playerIds);

if (playerError) throw playerError;

// Obtener equipos
const { data: teams, error: teamError } = await supabase
  .from('tournament_team')
  .select('id, name')
  .in('id', teamIds);

if (teamError) throw teamError;

// Unir y ordenar
const topScorers = players?.map(player => {
  const team = teams?.find(t => t.id === player.team_id);
  return {
    id: player.id,
    name: player.name,
    team: team?.name || 'Sin equipo',
    count: goalCounts[player.id] || 0
  };
}).sort((a, b) => b.count - a.count) ?? [];
---

<h2 class="text-xl font-bold my-4">Goleadores</h2>
{topScorers.map((scorer, index) => (
  <div class="flex justify-between py-2 border-b">
    <span>{index + 1}. {scorer.name} ({scorer.team})</span>
    <span>{scorer.count} goles</span>
  </div>
))}

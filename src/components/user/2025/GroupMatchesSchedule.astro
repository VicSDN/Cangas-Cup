---
import { supabase } from '../../../lib/supabase';

export interface Props {
  year?: number;
}
const { year = 2025 } = Astro.props;

// Helper para obtener el nombre de una relación que puede ser objeto o array[0]
function getNameFromRelation(data: unknown): string | null {
  if (data && typeof data === 'object') {
    if (Array.isArray(data)) {
      if (data.length > 0 && data[0] && typeof data[0].name === 'string') {
        return data[0].name.trim();
      }
    } else if ('name' in data && typeof (data as {name: any}).name === 'string') {
      return (data as {name: string}).name.trim();
    }
  }
  return null;
}

type MatchDisplay = {
  id: number;
  home_team_name: string;
  away_team_name: string;
  home_score: number | null;
  away_score: number | null;
  match_date_formatted: string;
  match_time_formatted: string;
  group_name: string;
};

type GroupedMatches = Record<string, MatchDisplay[]>;

let matchesByGroup: GroupedMatches = {};
let errorMessage: string | null = null;
let orderedGroupNamesWithMatches: string[] = [];

try {
  const { data: rawMatches, error } = await supabase
    .from('tournament_match')
    .select(`
      id,
      home_team_data:tournament_team!tournament_match_home_team_fkey(id, name),
      away_team_data:tournament_team!tournament_match_away_team_fkey(id, name),
      home_score,
      away_score,
      match_date,
      group_data:tournament_group (name)
    `)
    .eq('year', year)
    .eq('match_stage', 'Fase de Grupos')
    .order('name', { foreignTable: 'tournament_group', ascending: true })
    .order('match_date', { ascending: true })
    .order('id', { ascending: true });

  if (error) {
    throw new Error(`Error al cargar partidos de grupos: ${error.message}`);
  }

  if (rawMatches && rawMatches.length > 0) {
    const groupNamesEncountered = new Set<string>();

    rawMatches.forEach(match => {
      const groupName = getNameFromRelation(match.group_data) || 'Grupo Desconocido';
      
      if (!matchesByGroup[groupName]) {
        matchesByGroup[groupName] = [];
      }
      
      if (groupName !== 'Grupo Desconocido') {
        groupNamesEncountered.add(groupName);
      }
      
      const date = new Date(match.match_date);

      // getNameFromRelation handles if home_team_data is an object or array (it should be an object here)
      const home_team_name = getNameFromRelation(match.home_team_data) || 'Por definir';
      const away_team_name = getNameFromRelation(match.away_team_data) || 'Por definir';

      matchesByGroup[groupName].push({
        id: match.id,
        home_team_name: home_team_name,
        away_team_name: away_team_name,
        home_score: match.home_score,
        away_score: match.away_score,
        match_date_formatted: date.toLocaleDateString('es-ES', { day: '2-digit', month: 'short', year: 'numeric' }),
        match_time_formatted: date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit', hour12: false }),
        group_name: groupName,
      });
    });

    orderedGroupNamesWithMatches = Array.from(groupNamesEncountered).sort((a, b) => {
        const getSortablePart = (name: string) => name.replace('Grupo ', '');
        const partA = getSortablePart(a);
        const partB = getSortablePart(b);
        const numA = parseInt(partA, 10);
        const numB = parseInt(partB, 10);

        if (!isNaN(numA) && !isNaN(numB)) {
            return numA - numB;
        }
        return partA.localeCompare(partB);
    });
  }

} catch (e: any)  {
  errorMessage = e.message || "No se pudieron cargar los horarios de los partidos de grupos.";
}
---
<div class="bg-slate-800 rounded-xl shadow-xl overflow-hidden">
  <div class="p-5 md:p-6 bg-gradient-to-r from-cyan-700 to-cyan-600">
    <h2 class="text-xl md:text-2xl font-bold text-white text-center">Horarios y Resultados - Fase de Grupos ({year})</h2>
  </div>

  {errorMessage && (
    <div class="m-4 p-4 bg-red-900/80 border border-red-700 text-red-300 rounded-lg">
      <p class="font-semibold">Error:</p>
      <p>{errorMessage}</p>
    </div>
  )}

  {!errorMessage && orderedGroupNamesWithMatches.length > 0 && (
    <div class="p-4 md:p-6 space-y-8">
      {orderedGroupNamesWithMatches.map(groupName => ( 
        <section> 
          <h3 class="text-xl font-semibold mb-4 text-cyan-400 border-b-2 border-cyan-800 pb-2">{groupName}</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {matchesByGroup[groupName] && matchesByGroup[groupName].map(match => (
              <article class="p-4 bg-slate-700 rounded-lg shadow-md border border-slate-600 hover:shadow-slate-900/30 hover:border-slate-500 transition-all duration-200">
                <div class="flex items-center justify-between mb-2 text-sm">
                  <span class="font-semibold text-slate-200 truncate w-2/5 text-right pr-2" title={match.home_team_name}>{match.home_team_name}</span>
                  {match.home_score !== null && match.away_score !== null ? (
                    <span class="text-lg font-bold text-cyan-300 px-2.5 py-1 bg-cyan-700/50 rounded-md shadow-sm">
                      {match.home_score} - {match.away_score}
                    </span>
                  ) : (
                    <span class="text-md font-bold text-slate-500 px-2">vs</span>
                  )}
                  <span class="font-semibold text-slate-200 truncate w-2/5 text-left pl-2" title={match.away_team_name}>{match.away_team_name}</span>
                </div>
                <p class="text-xs text-center text-slate-400">{match.match_date_formatted} • {match.match_time_formatted} hs</p>
              </article>
            ))}
          </div>
        </section>
      ))}
    </div>
  )}
  {!errorMessage && orderedGroupNamesWithMatches.length === 0 && (
    <p class="p-6 text-center text-slate-500">No hay partidos de grupos programados o disponibles para el año {year}.</p>
  )}
</div>
---
import { supabase } from '../../../lib/supabase';

export interface Props {
  cardType: 'Amarilla' | 'Roja';
  year?: number;
}
const { cardType, year = 2025 } = Astro.props;

type PlayerCardStat = {
  id: number;
  name: string;
  team: string;
  count: number;
};

let playersWithCardsData: PlayerCardStat[] = [];
let errorMessage: string | null = null;
const cardTypeDisplay = cardType === 'Amarilla' ? 'Amarillas' : 'Rojas';
const cardQueryType = cardType; 

try {
  const { data: cards, error: cardsError } = await supabase
    .from('tournament_card')
    .select('player_id') 
    .eq('year', year)
    .ilike('type', cardQueryType); 

  if (cardsError) throw new Error(`Error al cargar tarjetas ${cardTypeDisplay}: ${cardsError.message}`);
  
  if (!cards || cards.length === 0) {
    playersWithCardsData = [];
  } else {
    const cardCounts = cards.reduce<Record<number, { count: number }>>((acc, card) => {
      if (card.player_id === null) return acc; 
      acc[card.player_id] = acc[card.player_id] || { count: 0 };
      acc[card.player_id].count += 1;
      return acc;
    }, {});

    const playerIds = Object.keys(cardCounts).map(id => parseInt(id)).filter(id => !isNaN(id));
    
    if (playerIds.length > 0) {
        const { data: playersWithTeam, error: playerError } = await supabase
        .from('tournament_player')
        .select(`
            id, 
            name,
            team:tournament_team ( name ) 
        `)
        .in('id', playerIds)
        .eq('year', year);

        if (playerError) throw new Error(`Error al cargar jugadores y equipos para tarjetas: ${playerError.message}`);
        
        if (playersWithTeam) {
            playersWithCardsData = playersWithTeam.map(player => {
                const teamName = player.team ? (player.team as unknown as { name: string }).name : 'Equipo Desconocido';
                
                return {
                    id: player.id,
                    name: player.name,
                    team: teamName,
                    count: cardCounts[player.id]?.count || 0,
                };
            })
            .filter(p => p.count > 0)
            .sort((a, b) => b.count - a.count || a.name.localeCompare(b.name));
        }
    } else {
        playersWithCardsData = []; 
    }
  }
} catch (e: any) {
  errorMessage = e.message || `No se pudieron cargar los datos de tarjetas ${cardTypeDisplay}.`;
}

const headerBgClass = cardType === 'Amarilla' ? 'from-yellow-600 to-yellow-500' : 'from-red-700 to-red-600';
const badgeTextClass = cardType === 'Amarilla' ? 'text-yellow-300' : 'text-red-300';
const badgeBgClass = cardType === 'Amarilla' ? 'bg-yellow-700/40' : 'bg-red-700/40';
---

<div class="bg-slate-800 rounded-xl shadow-xl overflow-hidden">
  <div class={`p-5 md:p-6 bg-gradient-to-r ${headerBgClass}`}>
    <h2 class="text-xl md:text-2xl font-bold text-white text-center">Jugadores con Más Tarjetas {cardTypeDisplay} ({year})</h2>
  </div>
  
  {errorMessage && (
    <div class="m-4 p-4 bg-red-900/80 border border-red-700 text-red-300 rounded-lg">
      <p class="font-semibold">Error:</p>
      <p>{errorMessage}</p>
    </div>
  )}

  {!errorMessage && playersWithCardsData.length > 0 && (
    <ul class="divide-y divide-slate-700">
      {playersWithCardsData.map((playerData, index) => (
        <li class="px-4 py-3 md:px-6 md:py-4 flex justify-between items-center transition-colors hover:bg-slate-700/70">
          <div class="flex items-center">
            <span class="text-sm text-slate-500 font-medium w-6 text-right mr-3">{index + 1}.</span>
            <div>
              <span class="text-sm md:text-base font-semibold text-slate-100">{playerData.name}</span>
              <span class="block md:inline text-xs text-slate-400 md:ml-2">({playerData.team})</span>
            </div>
          </div>
          <span class={`px-3 py-1 ${badgeBgClass} ${badgeTextClass} text-xs md:text-sm font-bold rounded-full`}>
            {playerData.count} {cardType.toLowerCase()}{playerData.count === 1 ? '' : 's'}
          </span>
        </li>
      ))}
    </ul>
  )}
  {!errorMessage && playersWithCardsData.length === 0 && (
    <p class="p-6 text-center text-slate-500">No hay datos de tarjetas {cardTypeDisplay} disponibles para el año {year}.</p>
  )}
</div>
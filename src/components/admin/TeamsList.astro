---
import { getTotalTeams, getAllTeams, Team } from '../../consts/2025/teams';

// Definimos las variables para almacenar los equipos y el total
let teams: Team[] = [];
let totalTeams: number = 0;

// Función para obtener los equipos y el total
const fetchTeams = async () => {
  try {
    totalTeams = await getTotalTeams();
    if (totalTeams > 0) {
      teams = await getAllTeams();
    }
  } catch (error) {
    console.error('Error fetching teams:', error);
  }
};

// Llamamos a la función para obtener los equipos
await fetchTeams();

// Función para devolver todos los equipos (sin filtrar en el servidor)
const allTeams = () => {
  return teams;
};
---

<section class="container px-4 mx-auto">
  <div class="sm:flex sm:items-center sm:justify-between">
    <div>
      <div class="flex items-center gap-x-3">
        <h2 class="text-lg font-medium text-gray-800 dark:text-white">EQUIPOS</h2>
        <span class="px-3 py-1 text-xs text-blue-600 bg-blue-100 rounded-full dark:bg-gray-800 dark:text-blue-400">
          {totalTeams} equipos
        </span>
      </div>
    </div>

    <div class="flex items-center mt-4 gap-x-3">
      <button class="flex items-center justify-center w-1/2 px-5 py-2 text-sm tracking-wide text-white transition-colors duration-200 bg-blue-500 rounded-lg shrink-0 sm:w-auto gap-x-2 hover:bg-blue-600 dark:hover:bg-blue-500 dark:bg-blue-600">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <span>Añadir Equipo</span>
      </button>
    </div>
  </div>

  <!-- Buscador -->
  <div class="mt-6 md:flex md:items-center md:justify-between">
    <div class="relative flex items-center mt-4 md:mt-0">
      <span class="absolute">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mx-3 text-gray-400 dark:text-gray-600">
          <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
        </svg>
      </span>

      <input
        id="searchInput"
        type="text"
        placeholder="Buscar equipo por nombre, ID o grupo"
        class="block w-full py-1.5 pr-5 text-gray-700 bg-white border border-gray-200 rounded-lg md:w-80 placeholder-gray-400/70 pl-11 rtl:pr-11 rtl:pl-5 dark:bg-gray-900 dark:text-gray-300 dark:border-gray-600 focus:border-blue-400 dark:focus:border-blue-300 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
      />
    </div>
  </div>

  <!-- Lista de equipos -->
  <div class="mt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    {allTeams().map((team) => (
      <div class="team p-4 bg-white dark:bg-gray-900 rounded-lg shadow-md" data-key={team.id} data-name={team.name} data-group_id={team.group_id} data-year={team.year}>
        <h3 class="text-lg font-semibold text-gray-800 dark:text-white">{team.name}</h3>
        <p class="text-sm text-gray-500 dark:text-gray-400">Grupo: {team.group_id}</p>
        <p class="text-sm text-gray-500 dark:text-gray-400">Año: {team.year}</p>
      </div>
    ))}
    <div id="noResultsMessage" class="col-span-full flex flex-col items-center text-center">
      <p class="text-gray-500 dark:text-gray-400">No se encontraron equipos.</p>
    </div>
  </div>

  <!-- Paginación -->
  <div class="mt-6 sm:flex sm:items-center sm:justify-between">
    <div class="text-sm text-gray-500 dark:text-gray-400">
      Page <span class="font-medium text-gray-700 dark:text-gray-100">1 of 10</span>
    </div>

    <div class="flex items-center mt-4 gap-x-4 sm:mt-0">
      <a href="#" class="flex items-center justify-center w-1/2 px-5 py-2 text-sm text-gray-700 capitalize transition-colors duration-200 bg-white border rounded-md sm:w-auto gap-x-2 hover:bg-gray-100 dark:bg-gray-900 dark:text-gray-200 dark:border-gray-700 dark:hover:bg-gray-800">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 rtl:-scale-x-100">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18" />
        </svg>
        <span>previous</span>
      </a>

      <a href="#" class="flex items-center justify-center w-1/2 px-5 py-2 text-sm text-gray-700 capitalize transition-colors duration-200 bg-white border rounded-md sm:w-auto gap-x-2 hover:bg-gray-100 dark:bg-gray-900 dark:text-gray-200 dark:border-gray-700 dark:hover:bg-gray-800">
        <span>Next</span>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 rtl:-scale-x-100">
          <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25L21 12m0 0l-3.75 3.75M21 12H3" />
        </svg>
      </a>
    </div>
  </div>

  <!-- Script para manejar la búsqueda en el cliente -->
  <script>
    const searchInput = document.getElementById('searchInput');
    const teamElements = document.querySelectorAll('.team');
    const noResultsMessage = document.getElementById('noResultsMessage');

    function filterTeams() {
      const query = (searchInput as HTMLInputElement)?.value.toLowerCase() || '';
      let hasMatches = false;
      teamElements.forEach((team) => {
        const name = (team as HTMLElement).dataset.name?.toLowerCase() || '';
        const id = (team as HTMLElement).dataset.key;
        const group_id = (team as HTMLElement).dataset.group_id;
        const matches = (
          name.includes(query) ||
          (id && id.toString().includes(query)) ||
          (group_id ?? '').toString().includes(query)
        );
        if (matches) {
          team.classList.remove('hidden');
          hasMatches = true;
        } else {
          team.classList.add('hidden');
        }
      });

      if (hasMatches) {
        if (noResultsMessage) {
          noResultsMessage.classList.add('hidden');
        }
      } else {
        if (noResultsMessage) {
          noResultsMessage.classList.remove('hidden');
        }
      }
    }

    if (searchInput) {
      searchInput.addEventListener('input', filterTeams);
    }

    // Filtro inicial
    filterTeams();
  </script>
</section>
---
import LayoutAdmin from '../../../layouts/LayoutAdmin.astro';
import { getSession } from '../../../lib/supabase';

// Check authentication
const session = await getSession();
if (!session) {
  return Astro.redirect('/admin/signin');
}
---

<LayoutAdmin description="La plataforma del Administrador" title="Añadir Nuevo Equipo">
  <section
    class="max-w-4xl mt-14 lg:mt-28 p-6 mx-auto bg-white rounded-md shadow-md dark:bg-gray-800"
  >
    <h2 class="text-lg font-semibold text-gray-700 capitalize dark:text-white">Datos de Equipo</h2>
    <h2>Añadir nuevo equipo</h2>

    <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col gap-2 w-80"></div>
 
    <div id="error-panel" class="hidden mb-4 p-4 rounded-md bg-red-100 border border-red-400 text-red-700">
      <h3 class="font-bold">Error</h3>
      <p id="error-message" class="mt-1"></p>
    </div>
    <form id="add-team-form" class="space-y-4">
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >Nombre del equipo:</label
        >
        <input
          type="text"
          name="name"
          id="name"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          placeholder="Nombre del equipo"
          required
        />
      </div>
      <div>
        <label for="group_id" class="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >ID del grupo:</label
        >
        <input
          type="number"
          name="group_id"
          id="group_id"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          placeholder="ID del grupo"
          required
        />
      </div>
      <div>
        <label for="year" class="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >Año:</label
        >
        <input
          type="number"
          name="year"
          id="year"
          value="2025"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          placeholder="Año"
          required
        />
      </div>
      <button
        type="submit"
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        Añadir equipo
      </button>
    </form>
  </section>
</LayoutAdmin>

<script>
  function showToast(message: string, type: 'error' | 'success' = 'error', details: string = '') {
    const toastContainer = document.getElementById('toast-container');
    if (!toastContainer) return;
    
    const toast = document.createElement('div');
    toast.className = `p-4 rounded-md shadow-md max-w-xs ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} text-white`;
    
    const messageEl = document.createElement('div');
    messageEl.className = 'font-bold';
    messageEl.textContent = message;
    toast.appendChild(messageEl);
    

    if (details) {
      const detailsEl = document.createElement('div');
      detailsEl.className = 'text-sm mt-1';
      detailsEl.textContent = details;
      toast.appendChild(detailsEl);
    }
    
    // Add close button
    const closeBtn = document.createElement('button');
    closeBtn.className = 'absolute top-1 right-1 text-white';
    closeBtn.innerHTML = '&times;';
    closeBtn.onclick = () => toast.remove();
    toast.appendChild(closeBtn);
    
    // Make toast relatively positioned for close button
    toast.style.position = 'relative';
    
    toastContainer.appendChild(toast);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
      toast.classList.add('opacity-0', 'transition-opacity', 'duration-500');
      setTimeout(() => toast.remove(), 500);
    }, 5000);
  }

  const form = document.getElementById('add-team-form') as HTMLFormElement;

  if (form) {
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(form);
      const name = formData.get('name')?.toString().trim();
      const group_id = parseInt(formData.get('group_id')?.toString() || '0', 10);
      const year = parseInt(formData.get('year')?.toString() || '0', 10);

      if (!name || isNaN(group_id) || isNaN(year)) {
        showToast('Validación fallida', 'error', 'Por favor, rellene todos los campos correctamente.');
        
        // Show validation errors in the form
        const errorPanel = document.getElementById('error-panel');
        const errorMessage = document.getElementById('error-message');
        if (errorPanel && errorMessage) {
          errorPanel.classList.remove('hidden');
          errorMessage.textContent = 'Por favor, rellene todos los campos correctamente.';
        }
        
        return;
      }
      
      const errorPanel = document.getElementById('error-panel');
      if (errorPanel) {
        errorPanel.classList.add('hidden');
      }

      try {
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const originalButtonText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = 'Guardando...';

        const response = await fetch('/api/add-team', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ name, group_id, year }),
          credentials: 'include' 
        });

        submitButton.disabled = false;
        submitButton.textContent = originalButtonText;

        const result = await response.json();
        
        if (!response.ok) {
          const errorPanel = document.getElementById('error-panel');
          const errorMessage = document.getElementById('error-message');
          
          if (errorPanel && errorMessage) {
            errorPanel.classList.remove('hidden');
            errorMessage.textContent = result.details || result.error || 'Error al añadir el equipo';
          }
          
          throw new Error(result.error || 'Error al añadir el equipo');
        }
        
        // Show success message
        showToast('¡Éxito!', 'success', 'Equipo añadido correctamente');
        
        // Reset form
        form.reset();
        
        // Pre-fill year again after reset
        const yearInput = document.getElementById('year') as HTMLInputElement;
        if (yearInput) {
          yearInput.value = '2025';
        }
   
        setTimeout(() => {
          window.location.href = '/admin/dashboard';
        }, 2000);
      } catch (error) {
        console.error('Error al insertar equipo:', error);

        showToast('Error', 'error', error instanceof Error ? error.message : 'Error al añadir el equipo');

        const errorPanel = document.getElementById('error-panel');
        const errorMessage = document.getElementById('error-message');
        
        if (errorPanel && errorMessage) {
          errorPanel.classList.remove('hidden');
          errorMessage.textContent = error instanceof Error ? error.message : 'Error al añadir el equipo';
        }
      }
    });
  } else {
    console.error('Formulario no encontrado');
  }
</script>

---
import type { Match, Team, Group, TransformedMatch as OriginalTransformedMatch } from '../../../types/tournament'; 
import LayoutAdmin from '../../../layouts/LayoutAdmin.astro';
import ButtonBack from '../../../sections/ButtonBack.astro';
import { supabase } from '../../../lib/supabase';

interface TransformedMatch extends OriginalTransformedMatch {
  year: number; 
}

const pageTitle = "Gestión de Partidos";
const currentUrl = new URL(Astro.request.url);
const yearParam = currentUrl.searchParams.get('year');
const defaultYear = new Date().getFullYear(); 
let currentYear: number = defaultYear;

if (yearParam) {
  const parsedYear = parseInt(yearParam, 10);
  if (!isNaN(parsedYear)) {
    currentYear = parsedYear;
  }
}

const availableYears: number[] = [defaultYear -2, defaultYear -1, defaultYear, defaultYear + 1, defaultYear + 2];

let matchesFromDb: Match[] = [];
let teamsMap: Map<number, string> = new Map();
let groupsMap: Map<number, string> = new Map();
let ssrErrorMessage: string | null = null;

try {
  const { data: matchesData, error: matchesError } = await supabase
    .from('tournament_match')
    .select<string, Match>(`
      id, home_team, away_team, group_id, match_date, year,
      home_score, away_score, match_stage, round_name, is_local_final
    `)
    .eq('year', currentYear)
    .order('match_date', { ascending: true });

  if (matchesError) throw matchesError;
  matchesFromDb = matchesData || [];

  const { data: teamsData, error: teamsError } = await supabase
    .from('tournament_team')
    .select<string, Team>('id, name, year')
    .eq('year', currentYear);

  if (teamsError) throw teamsError;
  teamsMap = new Map((teamsData || []).map(team => [team.id, team.name]));

  const { data: groupsData, error: groupsError } = await supabase
    .from('tournament_group')
    .select<string, Group>('id, name, year')
    .eq('year', currentYear);

  if (groupsError) throw groupsError;
  groupsMap = new Map((groupsData || []).map(group => [group.id, group.name]));

} catch (error: any) {
  console.error(`[SSR][${new Date().toISOString()}] Error obteniendo datos:`, error);
  ssrErrorMessage = error.message || "Ocurrió un error al cargar los datos del torneo.";
}

const displayMatches: TransformedMatch[] = matchesFromDb.map((match) => {
  let displayDate = "Fecha TBD";
  if (match.match_date) {
    try {
      const dateObj = new Date(match.match_date);
      if (dateObj instanceof Date && !isNaN(dateObj.valueOf())) {
        displayDate = dateObj.toLocaleString('es-ES', {
          day: '2-digit', month: '2-digit', year: 'numeric',
          hour: '2-digit', minute: '2-digit', hour12: false
        });
      }
    } catch (e) {}
  }

  return {
    id: match.id,
    display_date: displayDate,
    home_team_id: match.home_team,
    away_team_id: match.away_team,
    home_team_name: teamsMap.get(match.home_team) || `ID:${match.home_team}`,
    away_team_name: teamsMap.get(match.away_team) || `ID:${match.away_team}`,
    group_id: match.group_id,
    group_name: match.group_id ? (groupsMap.get(match.group_id) || `ID:${match.group_id}`) : null,
    home_score: match.home_score,
    away_score: match.away_score,
    match_stage: match.match_stage,
    round_name: match.round_name,
    is_local_final: match.is_local_final,
    year: match.year 
  };
});
---

<LayoutAdmin title={pageTitle} description={`Gestiona los partidos del torneo para el año ${currentYear}`}>
  <ButtonBack />

  <main class="container mx-auto px-4 py-8">
    <header class="flex flex-wrap justify-between items-center mb-6 gap-4">
      <h1 class="text-3xl font-bold text-gray-800 dark:text-white">Partidos del Año: <span class="text-indigo-600 dark:text-indigo-400">{currentYear}</span></h1>
      <div class="flex gap-4 items-center">
        <label for="year-select" class="text-sm font-medium text-gray-700 dark:text-gray-300">Cambiar Año:</label>
        <select id="year-select" class="form-select block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white">
          {availableYears.map(yearOpt => (
            <option value={yearOpt} selected={yearOpt === currentYear}>
              {yearOpt}
            </option>
          ))}
        </select>
        <a href={`/admin/matches/addMatch?year=${currentYear}`} class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold px-4 py-2.5 rounded-md shadow-sm text-sm transition-colors duration-150">
          Programar Partido
        </a>
      </div>
    </header>

    {ssrErrorMessage && (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md dark:bg-red-900 dark:text-red-200 dark:border-red-700" role="alert">
        <p class="font-bold">Error al cargar datos:</p>
        <p>{ssrErrorMessage}</p>
      </div>
    )}

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead class="bg-gray-100 dark:bg-gray-700">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider">Fecha y Hora</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider">Etapa / Grupo</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider">Equipo Local</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider">Equipo Visitante</th>
            <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider">Resultado</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
          </tr>
        </thead>
        <tbody id="matches-table-body" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          {displayMatches.length === 0 && !ssrErrorMessage ? (
            <tr>
              <td colspan="6" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400 italic">
                No se encontraron partidos para el año {currentYear}.
              </td>
            </tr>
          ) : (
            displayMatches.map((match) => (
              <tr data-match-row-id={match.id} class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150">
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">{match.display_date}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                  {match.group_name ? `Grupo: ${match.group_name}` : match.match_stage}
                  {match.round_name && <span class="text-xs text-gray-500 dark:text-gray-400"> ({match.round_name})</span>}
                  {match.is_local_final && <span class="ml-2 px-2 py-0.5 text-xs font-semibold bg-green-100 text-green-800 rounded-full dark:bg-green-700 dark:text-green-100">Final Local</span>}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">{match.home_team_name}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">{match.away_team_name}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300 text-center font-semibold result-cell">
                  {match.home_score !== null && match.away_score !== null
                    ? `${match.home_score} - ${match.away_score}`
                    : <span class="text-xs italic text-gray-500 dark:text-gray-400">Pendiente</span>
                  }
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm">
                  <button
                    type="button"
                    class="update-score-btn text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300 font-medium hover:underline"
                    data-match-id={match.id}
                    data-home-team={match.home_team_name}
                    data-away-team={match.away_team_name}
                    data-year={match.year.toString()}
                  >
                    Actualizar Resultado
                  </button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  </main>

  <div id="update-score-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 hidden items-center justify-center p-4 z-50" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md transform transition-all">
      <div class="flex justify-between items-center mb-4">
        <h2 id="modal-title" class="text-xl font-semibold text-gray-800 dark:text-white">Actualizar Resultado</h2>
        <button type="button" id="close-modal-btn" class="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300">
          <span class="sr-only">Cerrar modal</span>
          <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
        </button>
      </div>
      <p id="modal-match-info" class="text-sm text-gray-600 dark:text-gray-400 mb-6"></p>
      <form id="update-score-form" class="space-y-4">
        <input type="hidden" id="modal-match-id" name="matchId" />
        <input type="hidden" id="modal-match-year" name="matchYear" />
        <div>
          <label for="modal-home-score" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Local: <span id="modal-home-team-name" class="font-semibold"></span>
          </label>
          <input type="number" id="modal-home-score" name="homeScore" required min="0" class="mt-1 form-input block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white" />
        </div>
        <div>
          <label for="modal-away-score" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Visitante: <span id="modal-away-team-name" class="font-semibold"></span>
          </label>
          <input type="number" id="modal-away-score" name="awayScore" required min="0" class="mt-1 form-input block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white" />
        </div>
        <div class="flex justify-end space-x-3 pt-4">
          <button type="button" id="cancel-update-btn" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 dark:border-gray-500">
            Cancelar
          </button>
          <button type="submit" id="submit-update-btn" class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700 shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Guardar Cambios
          </button>
        </div>
        <p id="modal-form-error" class="text-xs text-red-600 dark:text-red-400 mt-2 hidden"></p>
      </form>
    </div>
  </div>
</LayoutAdmin>

<script>
  class ScoreUpdateModal {
    private modalElement = document.getElementById('update-score-modal') as HTMLElement | null;
    private matchIdInput = document.getElementById('modal-match-id') as HTMLInputElement | null;
    private matchYearInput = document.getElementById('modal-match-year') as HTMLInputElement | null;
    private matchInfoElement = document.getElementById('modal-match-info') as HTMLElement | null;
    private homeTeamNameElement = document.getElementById('modal-home-team-name') as HTMLElement | null;
    private awayTeamNameElement = document.getElementById('modal-away-team-name') as HTMLElement | null;
    private homeScoreInput = document.getElementById('modal-home-score') as HTMLInputElement | null;
    private awayScoreInput = document.getElementById('modal-away-score') as HTMLInputElement | null;
    private formElement = document.getElementById('update-score-form') as HTMLFormElement | null;
    private errorElement = document.getElementById('modal-form-error') as HTMLElement | null;
    private submitButton = document.getElementById('submit-update-btn') as HTMLButtonElement | null;

    constructor() {
      if (!this.modalElement || !this.formElement) {
        console.error('[CSR] Modal elements not found.');
        return; 
      }
      document.getElementById('close-modal-btn')?.addEventListener('click', () => this.hide());
      document.getElementById('cancel-update-btn')?.addEventListener('click', () => this.hide());
      this.formElement.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    private displayError(message: string) {
      if (this.errorElement) {
        this.errorElement.textContent = message;
        this.errorElement.classList.remove('hidden');
      }
    }
    private clearError() {
      if (this.errorElement) {
        this.errorElement.textContent = '';
        this.errorElement.classList.add('hidden');
      }
    }

    public show(matchId: string, homeTeamName: string, awayTeamName: string, year?: string | number) {
      if (!this.modalElement || !this.matchIdInput || !this.matchInfoElement ||
          !this.homeTeamNameElement || !this.awayTeamNameElement || !this.matchYearInput ||
          !this.homeScoreInput || !this.awayScoreInput) {
        alert('Error: No se puede abrir el modal. Faltan elementos HTML.');
        return;
      }
      this.clearError();
      this.matchIdInput.value = matchId;
      if (year) this.matchYearInput.value = String(year);
      this.homeTeamNameElement.textContent = homeTeamName;
      this.awayTeamNameElement.textContent = awayTeamName;
      this.matchInfoElement.textContent = `Partido: ${homeTeamName} vs ${awayTeamName}`;

      const row = document.querySelector(`tr[data-match-row-id="${matchId}"]`);
      this.homeScoreInput.value = '';
      this.awayScoreInput.value = '';
      if (row) {
        const resultCell = row.querySelector('.result-cell');
        const currentResultText = resultCell?.textContent?.trim() || '';
        if (currentResultText && currentResultText !== 'Pendiente' && currentResultText.includes(' - ')) {
          const [home, away] = currentResultText.split(' - ').map(s => s.trim());
          this.homeScoreInput.value = home;
          this.awayScoreInput.value = away;
        }
      }
      this.modalElement.classList.remove('hidden');
      this.modalElement.classList.add('flex'); 
      this.homeScoreInput.focus();
    }
    public hide() {
      if (this.modalElement) {
        this.modalElement.classList.add('hidden');
        this.modalElement.classList.remove('flex');
        this.formElement?.reset();
        this.clearError();
      }
    }

    private async handleSubmit(event: SubmitEvent) {
      event.preventDefault();
      if (!this.matchIdInput || !this.homeScoreInput || !this.awayScoreInput || !this.submitButton || !this.matchYearInput) return;
      this.clearError();

      const matchId = this.matchIdInput.value;
      const homeScore = parseInt(this.homeScoreInput.value, 10);
      const awayScore = parseInt(this.awayScoreInput.value, 10);
      const matchYear = this.matchYearInput.value;

      if (isNaN(homeScore) || isNaN(awayScore) || homeScore < 0 || awayScore < 0) {
        this.displayError('Los resultados deben ser números enteros no negativos.');
        return;
      }
      
      this.submitButton.disabled = true;
      this.submitButton.textContent = 'Guardando...';

      const payload: { match_id: string, home_score: number, away_score: number, year?: string } = { 
        match_id: matchId, 
        home_score: homeScore, 
        away_score: awayScore 
      };
      if (matchYear) payload.year = matchYear; 

      try {
        const response = await fetch(`/api/auth/updatedMatchedScore`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
        const responseData = await response.json();
        if (!response.ok) {
          throw new Error(responseData.error || responseData.message || `Error del servidor (${response.status})`);
        }
        const rowToUpdate = document.querySelector(`tr[data-match-row-id="${matchId}"]`);
        if (rowToUpdate) {
          const resultCell = rowToUpdate.querySelector('.result-cell');
          if (resultCell) resultCell.textContent = `${homeScore} - ${awayScore}`;
        }
        this.hide();
      } catch (error: any) {
        console.error('[CSR] Error al actualizar resultado:', error);
        this.displayError(error.message || 'Ocurrió un error desconocido.');
      } finally {
        if (this.submitButton) {
          this.submitButton.disabled = false;
          this.submitButton.textContent = 'Guardar Cambios';
        }
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const yearSelect = document.getElementById('year-select') as HTMLSelectElement | null;
    if (yearSelect) {
      yearSelect.addEventListener('change', () => {
        window.location.href = `/admin/matches?year=${yearSelect.value}`;
      });
    }
    const modalInstance = new ScoreUpdateModal();
    document.querySelectorAll('.update-score-btn').forEach(button => {
      button.addEventListener('click', (event) => {
        const target = event.currentTarget as HTMLButtonElement;
        const matchId = target.dataset.matchId;
        const homeTeamName = target.dataset.homeTeam;
        const awayTeamName = target.dataset.awayTeam;
        const year = target.dataset.year; 
        if (matchId && homeTeamName && awayTeamName) {
          modalInstance.show(matchId, homeTeamName, awayTeamName, year);
        }
      });
    });
  });
</script>